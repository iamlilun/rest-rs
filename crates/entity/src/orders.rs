//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "orders")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub order_link_id: String,
    pub order_id: String,
    pub side: i8,
    pub symbol: String,
    pub price: f64,
    pub qty: f64,
    pub order_type: String,
    pub reduce_only: Option<i8>,
    pub kline_time: Option<i32>,
    pub profit_and_loss: f64,
    pub rel_order_id: String,
    pub rel_order_link_id: String,
    pub user_account: String,
    pub strategy_name: String,
    pub action: i8,
    pub state: i8,
    pub created_at: DateTime,
    pub updated_at: DateTime,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Users,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Users => Entity::belongs_to(super::users::Entity)
                .from(Column::UserAccount)
                .to(super::users::Column::Account)
                .into(),
        }
    }
}

impl Related<super::users::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Users.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
