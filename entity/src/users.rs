//! SeaORM Entity. Generated by sea-orm-codegen 0.8.0

use super::orders;
use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel)]
#[sea_orm(table_name = "users")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i64,
    pub account: String,
    pub password: String,
    pub token: String,
    pub name: String,
    pub role: i8,
    pub api_key: String,
    pub secret_key: String,
    pub state: i8,
    pub created_at: DateTime,
    pub updated_at: DateTime,
    pub deleted_at: Option<DateTime>,
}

#[derive(Copy, Clone, Debug, EnumIter)]
pub enum Relation {
    Orders,
}

impl RelationTrait for Relation {
    fn def(&self) -> RelationDef {
        match self {
            Self::Orders => Entity::has_many(super::orders::Entity).into(),
        }
    }
}

impl Related<super::orders::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Orders.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}

#[derive(Debug)]
pub struct WithOrders;

impl Linked for WithOrders {
    type FromEntity = Entity;

    type ToEntity = orders::Entity;

    fn link(&self) -> Vec<RelationDef> {
        vec![Relation::Orders.def()]
    }
}
